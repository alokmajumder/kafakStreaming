/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ibm.ikea.kafka.stream;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class emprecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7117480776371934479L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"emprecord\",\"namespace\":\"com.ibm.ikea.kafka.stream\",\"fields\":[{\"name\":\"empname\",\"type\":\"string\"},{\"name\":\"deptname\",\"type\":\"string\"},{\"name\":\"salary\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<emprecord> ENCODER =
      new BinaryMessageEncoder<emprecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<emprecord> DECODER =
      new BinaryMessageDecoder<emprecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<emprecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<emprecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<emprecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this emprecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a emprecord from a ByteBuffer. */
  public static emprecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence empname;
  @Deprecated public java.lang.CharSequence deptname;
  @Deprecated public long salary;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public emprecord() {}

  /**
   * All-args constructor.
   * @param empname The new value for empname
   * @param deptname The new value for deptname
   * @param salary The new value for salary
   */
  public emprecord(java.lang.CharSequence empname, java.lang.CharSequence deptname, java.lang.Long salary) {
    this.empname = empname;
    this.deptname = deptname;
    this.salary = salary;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return empname;
    case 1: return deptname;
    case 2: return salary;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: empname = (java.lang.CharSequence)value$; break;
    case 1: deptname = (java.lang.CharSequence)value$; break;
    case 2: salary = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'empname' field.
   * @return The value of the 'empname' field.
   */
  public java.lang.CharSequence getEmpname() {
    return empname;
  }

  /**
   * Sets the value of the 'empname' field.
   * @param value the value to set.
   */
  public void setEmpname(java.lang.CharSequence value) {
    this.empname = value;
  }

  /**
   * Gets the value of the 'deptname' field.
   * @return The value of the 'deptname' field.
   */
  public java.lang.CharSequence getDeptname() {
    return deptname;
  }

  /**
   * Sets the value of the 'deptname' field.
   * @param value the value to set.
   */
  public void setDeptname(java.lang.CharSequence value) {
    this.deptname = value;
  }

  /**
   * Gets the value of the 'salary' field.
   * @return The value of the 'salary' field.
   */
  public java.lang.Long getSalary() {
    return salary;
  }

  /**
   * Sets the value of the 'salary' field.
   * @param value the value to set.
   */
  public void setSalary(java.lang.Long value) {
    this.salary = value;
  }

  /**
   * Creates a new emprecord RecordBuilder.
   * @return A new emprecord RecordBuilder
   */
  public static com.ibm.ikea.kafka.stream.emprecord.Builder newBuilder() {
    return new com.ibm.ikea.kafka.stream.emprecord.Builder();
  }

  /**
   * Creates a new emprecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new emprecord RecordBuilder
   */
  public static com.ibm.ikea.kafka.stream.emprecord.Builder newBuilder(com.ibm.ikea.kafka.stream.emprecord.Builder other) {
    return new com.ibm.ikea.kafka.stream.emprecord.Builder(other);
  }

  /**
   * Creates a new emprecord RecordBuilder by copying an existing emprecord instance.
   * @param other The existing instance to copy.
   * @return A new emprecord RecordBuilder
   */
  public static com.ibm.ikea.kafka.stream.emprecord.Builder newBuilder(com.ibm.ikea.kafka.stream.emprecord other) {
    return new com.ibm.ikea.kafka.stream.emprecord.Builder(other);
  }

  /**
   * RecordBuilder for emprecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<emprecord>
    implements org.apache.avro.data.RecordBuilder<emprecord> {

    private java.lang.CharSequence empname;
    private java.lang.CharSequence deptname;
    private long salary;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.ibm.ikea.kafka.stream.emprecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.empname)) {
        this.empname = data().deepCopy(fields()[0].schema(), other.empname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.deptname)) {
        this.deptname = data().deepCopy(fields()[1].schema(), other.deptname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.salary)) {
        this.salary = data().deepCopy(fields()[2].schema(), other.salary);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing emprecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.ibm.ikea.kafka.stream.emprecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.empname)) {
        this.empname = data().deepCopy(fields()[0].schema(), other.empname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.deptname)) {
        this.deptname = data().deepCopy(fields()[1].schema(), other.deptname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.salary)) {
        this.salary = data().deepCopy(fields()[2].schema(), other.salary);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'empname' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmpname() {
      return empname;
    }

    /**
      * Sets the value of the 'empname' field.
      * @param value The value of 'empname'.
      * @return This builder.
      */
    public com.ibm.ikea.kafka.stream.emprecord.Builder setEmpname(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.empname = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'empname' field has been set.
      * @return True if the 'empname' field has been set, false otherwise.
      */
    public boolean hasEmpname() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'empname' field.
      * @return This builder.
      */
    public com.ibm.ikea.kafka.stream.emprecord.Builder clearEmpname() {
      empname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'deptname' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeptname() {
      return deptname;
    }

    /**
      * Sets the value of the 'deptname' field.
      * @param value The value of 'deptname'.
      * @return This builder.
      */
    public com.ibm.ikea.kafka.stream.emprecord.Builder setDeptname(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.deptname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'deptname' field has been set.
      * @return True if the 'deptname' field has been set, false otherwise.
      */
    public boolean hasDeptname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'deptname' field.
      * @return This builder.
      */
    public com.ibm.ikea.kafka.stream.emprecord.Builder clearDeptname() {
      deptname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'salary' field.
      * @return The value.
      */
    public java.lang.Long getSalary() {
      return salary;
    }

    /**
      * Sets the value of the 'salary' field.
      * @param value The value of 'salary'.
      * @return This builder.
      */
    public com.ibm.ikea.kafka.stream.emprecord.Builder setSalary(long value) {
      validate(fields()[2], value);
      this.salary = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'salary' field has been set.
      * @return True if the 'salary' field has been set, false otherwise.
      */
    public boolean hasSalary() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'salary' field.
      * @return This builder.
      */
    public com.ibm.ikea.kafka.stream.emprecord.Builder clearSalary() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public emprecord build() {
      try {
        emprecord record = new emprecord();
        record.empname = fieldSetFlags()[0] ? this.empname : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.deptname = fieldSetFlags()[1] ? this.deptname : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.salary = fieldSetFlags()[2] ? this.salary : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<emprecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<emprecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<emprecord>
    READER$ = (org.apache.avro.io.DatumReader<emprecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
